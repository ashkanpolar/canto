//============================================================================
//  Table of Contents
//
//  #Breakpoint and Grid Variables
//  #General Variables
//  #Sass Mixins
//  #Normalize
//  #Grid Setup
//  #Basic Styles
//  #Helper Classes
//  #Typography
//  #Rich Text Editor
//  #Links and Buttons
//  #Lists
//  #Tables
//  #OOCSS Media Object
//  #Images and Iframes
//  #Forms
//  #Icons
//  #Pagination
//  #Site Header
//  #Site Nav and Dropdowns
//  #Mobile Nav
//  #Drawers
//  #Site Footer
//  #Product and Collection Grids
//  #Collection Filters
//  #Breadcrumbs
//  #Product Page
//  #Notes and Form Feedback
//  #Cart Page
//  #Ajax Cart Styles
//==============================================================================

// Convert all Pixel Values to rem
$baseFontSize: 16px; // Henceforth known as 1em/rem
@function rem($target) {
  @if $target == 0 {
    @return 0;
  }
  @return $target / $baseFontSize + 0rem;
}

// Grid breakpoints
//
// Define the minimum and maximum dimensions at which your layout will change,
// adapting to different screen sizes, for use in media queries.

$grid-breakpoints: (
    // Extra small screen / phone
        xs: rem(0),
    // Small screen / phone
        sm: rem(544px),
    // Medium screen / tablet
        md: rem(768px),
    // Large screen / desktop
        lg: rem(992px),
    // Extra large screen / wide desktop
        xl: rem(1200px),
    // Extra Extra Large / ultra-wide
        xxl: rem(1600px)
) !default;


// Grid containers
//
// Define the maximum width of `.container` for different screen sizes.

$container-max-widths: (
        //sm: 100%,
        //md: 100%,
        //lg: 100%,
        //xl: rem(1200px),
        xxl: rem(1600px)
) !default;


// Grid columns
//
// Set the number of columns and specify the width of the gutters.

$grid-columns: 12 !default;
$grid-gutter-width: 40px; //rem(40px);

//============================================================================
//  #General Variables
//============================================================================

// Canto Colors
$colorPrimary: {{ settings.color_primary }};
$colorSecondary: {{ settings.color_secondary }};

// Button colors
$colorBtnPrimary: $colorSecondary;
$colorBtnPrimaryHover: lighten($colorSecondary, 10%);
$colorBtnPrimaryActive: $colorBtnPrimaryHover;
$colorBtnPrimaryText: {{ settings.color_primary }};

$colorBtnSecondary: $colorSecondary;
$colorBtnSecondaryHover: darken($colorBtnSecondary, 10%);
$colorBtnSecondaryActive: darken($colorBtnSecondaryHover, 10%);
$colorBtnSecondaryText: {{ settings.color_primary }};

// Text link colors
$colorLink: {{ settings.color_body_text }};
$colorLinkHover: lighten($colorPrimary, 15%);

// Text colors
$colorTextBody: {{ settings.color_body_text }};

// Backgrounds
$colorBody: {{ settings.color_body_bg }};

// Border colors
$colorBorder: {{ settings.color_borders }};

// Nav and dropdown link background
$colorNav: {{ settings.color_navigation_bg }};
$colorNavText: {{ settings.color_navigation_text }};

// Site Footer
$colorFooterBg: {{ settings.color_footer_bg }};
$colorFooterText: {{ settings.color_footer_text }};
$footerHeight: rem(584px); //include margin

// Helper colors
$disabledGrey: #f6f6f6;
$disabledBorder: darken($disabledGrey, 25%);
$errorRed: #d02e2e;
$errorRedBg: #fff6f6;
$successGreen: #56ad6a;
$successGreenBg: #ecfef0;

// Drawers
$drawerNavWidth: rem(300px);
$drawerCartWidth: rem(300px);
$colorDrawers: #f6f6f6;
$colorDrawerBorder: darken($colorDrawers, 5%);
$colorDrawerText: #333;
$drawerTransition: 'all 0.4s cubic-bezier(0.46, 0.01, 0.32, 1)';

// Sizing variables
$gutter: rem(40px);
$gridGutter: rem(40px); // can be a %, but nested grids will have smaller margins because of it
$radius: 0;

// Z-index
$zindexNavDropdowns: 500;
$zindexDrawer: 1000;

// ================ Typography ================

@import 'https://fonts.googleapis.com/css?family=Quicksand';
$headerFontStack: 'Quicksand', 'HelveticaNeue', 'Helvetica Neue', Helvetica, Arial, sans-serif;
$headerFontWeight: 700;

$bodyFontStack: 'Quicksand', 'HelveticaNeue', 'Helvetica Neue', Helvetica, Arial, sans-serif;

@font-face {
  font-family: 'icons';
  src: url('{{ "icons.eot" | asset_url }}');
  src: url('{{ "icons.eot" | asset_url }}#iefix') format("embedded-opentype"),
       url('{{ "icons.woff" | asset_url }}') format("woff"),
       url('{{ "icons.ttf" | asset_url }}') format("truetype"),
       url('{{ "icons.svg" | asset_url }}#timber-icons') format("svg");
  font-weight: normal;
  font-style: normal;
}
$socialIconFontStack: 'icons';


// ============================================================================
//  #Sass Mixins
// ============================================================================
@mixin clearfix() {
  &:after {
    content: '';
    display: table;
    clear: both; }
  *zoom: 1;
}

@mixin prefix($property, $value) {
  -webkit-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -ms-#{$property}: #{$value};
  -o-#{$property}: #{$value};
  #{$property}: #{$value};
}

@mixin transition($transition: 0.1s all) {
  @include prefix('transition', #{$transition});
}

@mixin transform($transform: 0.1s all) {
  @include prefix('transform', #{$transform});
}

@mixin gradient($from, $to, $fallback) {
  background: $fallback;
  background: -moz-linear-gradient(top, $from 0%, $to 100%);
  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$from), color-stop(100%,$to));
  background: -webkit-linear-gradient(top, $from 0%, $to 100%);
  background: -o-linear-gradient(top, $from 0%, $to 100%);
  background: -ms-linear-gradient(top, $from 0%, $to 100%);
  background: linear-gradient(top bottom, $from 0%, $to 100%);
}

@mixin backface($visibility: hidden) {
  @include prefix('backface-visibility', #{$visibility});
}

@mixin box-sizing($box-sizing: border-box) {
  -webkit-box-sizing: #{$box-sizing};
  -moz-box-sizing: #{$box-sizing};
  box-sizing: #{$box-sizing};
}

// Vertically fix position to top of bottom
@mixin vfixelement($vposition, $value: 0) {
  position: fixed;
  left: 0;
  right: 0;
  #{$vposition}: $value;
}
@mixin makeInvisible {
  clip: rect(0, 0, 0, 0);
  overflow: hidden;
  position: absolute;
  height: rem(1px);
  width: rem(1px);
  opacity: 0;
}
@mixin iconBtn($iconSrc) {
  display: block;
  .icon {
    height: rem(40px);
    width: rem(40px);
    display: block;
    background:{
      image: url($iconSrc);
      repeat: no-repeat;
      position: 50% 50%;
      color: transparent;
    }
  }
  .fallback-text {
    @include makeInvisible;
  }
}

@function em($target, $context: $baseFontSize) {
  @if $target == 0 {
    @return 0;
  }
  @return $target / $context + 0em;
}

@function color-control($color) {
  @if (lightness( $color ) > 40) {
    @return #000;
  }
  @else {
    @return #fff;
  }
}

// Flexbox Mixins
// http://philipwalton.github.io/solved-by-flexbox/
// https://github.com/philipwalton/solved-by-flexbox
//
// Copyright (c) 2013 Brian Franco
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// This is a set of mixins for those who want to mess around with flexbox
// using the native support of current browsers. For full support table
// check: http://caniuse.com/flexbox
//
// Basically this will use:
//
// * Fallback, old syntax (IE10, mobile webkit browsers - no wrapping)
// * Final standards syntax (FF, Safari, Chrome, IE11, Opera)
//
// This was inspired by:
//
// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
//
// With help from:
//
// * http://w3.org/tr/css3-flexbox/
// * http://the-echoplex.net/flexyboxes/
// * http://msdn.microsoft.com/en-us/library/ie/hh772069(v=vs.85).aspx
// * http://css-tricks.com/using-flexbox/
// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
// * https://developer.mozilla.org/en-us/docs/web/guide/css/flexible_boxes

//----------------------------------------------------------------------

// Flexbox Containers
//
// The 'flex' value causes an element to generate a block-level flex
// container box.
//
// The 'inline-flex' value causes an element to generate a inline-level
// flex container box.
//
// display: flex | inline-flex
//
// http://w3.org/tr/css3-flexbox/#flex-containers
//
// (Placeholder selectors for each type, for those who rather @extend)

@mixin flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}

%flexbox { @include flexbox; }

//----------------------------------

@mixin inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

%inline-flex { @include inline-flex; }

//----------------------------------------------------------------------

// Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in.
//
// Values: row | row-reverse | column | column-reverse
// Default: row
//
// http://w3.org/tr/css3-flexbox/#flex-direction-property

@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}
// Shorter version:
@mixin flex-dir($args...) { @include flex-direction($args...); }

//----------------------------------------------------------------------

// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in.
//
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property

@mixin flex-wrap($value: nowrap) {
  // No Webkit Box fallback.
  -webkit-flex-wrap: $value;
  -moz-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}

//----------------------------------------------------------------------

// Flexbox Flow (shorthand)
//
// The 'flex-flow' property is a shorthand for setting the 'flex-direction'
// and 'flex-wrap' properties, which together define the flex container's
// main and cross axes.
//
// Values: <flex-direction> | <flex-wrap>
// Default: row nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-flow-property

@mixin flex-flow($values: (row nowrap)) {
  // No Webkit Box fallback.
  -webkit-flex-flow: $values;
  -moz-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

//----------------------------------------------------------------------

// Flexbox Order
//
// The 'order' property controls the order in which flex items appear within
// their flex container, by assigning them to ordinal groups.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#order-property

@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -moz-order: $int;
  -ms-flex-order: $int;
  order: $int;
}

//----------------------------------------------------------------------

// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers
// are invalid.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#flex-grow-property

@mixin flex-grow($int: 0) {
  -webkit-box-flex: $int;
  -webkit-flex-grow: $int;
  -moz-flex-grow: $int;
  -ms-flex-positive: $int;
  flex-grow: $int;
}

//----------------------------------------------------------------------

// Flexbox Shrink
//
// The 'flex-shrink' property sets the flex shrink factor. Negative numbers
// are invalid.
//
// Default: 1
//
// http://w3.org/tr/css3-flexbox/#flex-shrink-property

@mixin flex-shrink($int: 1) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex-negative: $int;
  flex-shrink: $int;
}

//----------------------------------------------------------------------

// Flexbox Basis
//
// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
//
// Values: Like "width"
// Default: auto
//
// http://www.w3.org/TR/css3-flexbox/#flex-basis-property

@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  -moz-flex-basis: $value;
  -ms-flex-preferred-size: $value;
  flex-basis: $value;
}

//----------------------------------------------------------------------

// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
//
// http://w3.org/tr/css3-flexbox/#flex-property

@mixin flex($fg: 1, $fs: null, $fb: null) {

  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so let's grab the
  // first item in the list and just return that.
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }

  -webkit-box-flex: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -moz-box-flex: $fg-boxflex;
  -moz-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

//----------------------------------------------------------------------

// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis
// of the current line of the flex container. This is done after any flexible
// lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are
// inflexible, or are flexible but have reached their maximum size. It also
// exerts some control over the alignment of items when they overflow the line.
//
// Note: 'space-*' values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
//
// http://w3.org/tr/css3-flexbox/#justify-content-property

@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}
// Shorter version:
@mixin flex-just($args...) { @include justify-content($args...); }

//----------------------------------------------------------------------

// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.)
//
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-items-property

@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}

//----------------------------------

// Flexbox Align Self
//
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto

@mixin align-self($value: auto) {
  // No Webkit Box Fallback.
  -webkit-align-self: $value;
  -moz-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

//----------------------------------------------------------------------

// Flexbox Align Content
//
// The 'align-content' property aligns a flex container's lines within the
// flex container when there is extra space in the cross-axis, similar to
// how 'justify-content' aligns individual items within the main-axis. Note,
// this property has no effect when the flexbox has only a single line.
//
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-content-property

@mixin align-content($value: stretch) {
  // No Webkit Box Fallback.
  -webkit-align-content: $value;
  -moz-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 544px, md: 768px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.
//
// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 544px, md: 768px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 544px, md: 768px))
//    544px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 1px.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 544px, md: 768px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  @include media-breakpoint-up($name, $breakpoints) {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  @include media-breakpoint-up($lower, $breakpoints) {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// ============================================================================
//   #Flex Grid Setup
//     - Based on bootstrap 4 flexbox grid
//     - Breakpoints defined above, under #Breakpoint and Grid Variables
// ==============================================================================

/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container() {
  margin-left: auto;
  margin-right: auto;
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row($gutter: $grid-gutter-width) {
  @include flexbox;
  @include flex-flow(row wrap);
  @include media-breakpoint-up(lg) {
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
  }
}

// To place directly inside columns for subgrids
@mixin make-subrow($gutter: $grid-gutter-width) {
  @include flexbox;
  @include flex-flow(row wrap);
  @include media-breakpoint-up(md) {
    margin-left: ($gutter / -4);
    margin-right: ($gutter / -4);
  }
  @include media-breakpoint-up(lg) {
    margin-left: ($gutter / -2);
    margin-right: ($gutter / -2);
  }
}

@mixin make-col($gutter: $grid-gutter-width) {
  position: relative;
  min-height: rem(1px);
  @include media-breakpoint-up(md) {
    padding-left: ($gutter / 4);
    padding-right: ($gutter / 4);
  }
  @include media-breakpoint-up(lg) {
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
  }
}

@mixin make-col-span($size, $columns: $grid-columns) {
  @include flex(0, 0, percentage($size / $columns));
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
  left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
  right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
  // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
  @if $type == push {
    @include make-col-push($size, $columns);
  } @else if $type == pull {
    @include make-col-pull($size, $columns);
  } @else if $type == offset {
    @include make-col-offset($size, $columns);
  }
}

//============================================================================
// #Normalize
//============================================================================
*, input, :before, :after {
  @include box-sizing();
}

//
// 1. Change the default font family in all browsers (opinionated).
// 2. Prevent adjustments of font size after orientation changes in IE and iOS.
//

html {
  font-family: sans-serif; // 1
  -ms-text-size-adjust: 100%; // 2
  -webkit-text-size-adjust: 100%; // 2
}

html, body {
  padding: 0;
  margin: 0;
}

article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary {
  display: block;
}

audio, canvas, progress, video {
  display: inline-block;
  vertical-align: baseline;
}

audio:not([controls]) {
  display: none;
  height: 0;
}

//
// Remove the gray background on active links in IE 10.
//

a {
  background-color: transparent;
}

//
// Remove the outline on focused links when they are also active or hovered
// in all browsers (opinionated).
//

a:active,
a:hover {
  outline-width: 0;
}

//
// Remove the border on images inside links in IE 10-.
//

img {
  border-style: none;
}

//
// Hide the overflow in IE.
//

svg:not(:root) {
  overflow: hidden;
}

button,
input,
select,
textarea {
  font: inherit;
}

//
// Restore the font weight unset by the previous rule.
//

optgroup {
  font-weight: bold;
}

//
// Show the overflow in IE.
// 1. Show the overflow in Edge.
// 2. Show the overflow in Edge, Firefox, and IE.
//

button,
input, // 1
select { // 2
  overflow: visible;
}

//
// Remove the margin in Safari.
// 1. Remove the margin in Firefox and Safari.
//

button,
input,
select,
textarea { // 1
  margin: 0;
}

//
// Remove the margin in Safari.
// 1. Remove the margin in Firefox and Safari.
//

button,
input,
select,
textarea { // 1
  margin: 0;
}

//============================================================================
//  #Basic Styles
//============================================================================
html {
  font-size: $baseFontSize;
  height: 100%;
}

body {
  background-color: $colorBody;
  height: 100%;
}

[tabindex='-1']:focus {
  outline: none;
}

//============================================================================
//  #Helper Classes
//============================================================================
.is-transitioning {
  display: block !important;
  visibility: visible !important;
}

.clearfix {
  @include clearfix;
}

//============================================================================
//  #Typography
//============================================================================
body,
input,
textarea,
button,
select {
  font-size: 1rem;
  line-height: 1.25;
  font-family: $bodyFontStack;
  color: $colorTextBody;
  font-weight: 300;
  -webkit-font-smoothing: antialiased;
  -webkit-text-size-adjust: 100%;
}

h1, h2, h3, h4, h5, h6 {
  display: block;
  font-family: $headerFontStack;
  font-weight: $headerFontWeight;
  margin: 0 0 1.25rem;
  line-height: 1.25;

  a {
    text-decoration: none;
    font-weight: inherit;
  }
}

//================ Use rem() Sass function to declare font-size ================
h1 {
  font-size: rem(24px);
  @include media-breakpoint-up(md){
    font-size: rem(30px);
  }
}

h2 {
  font-size: rem(22px);
  @include media-breakpoint-up(md){
    font-size: rem(26px);
  }
}

h3 {
  font-size: rem(20px);
  @include media-breakpoint-up(md){
    font-size: rem(22px);
  }
}

h4 {
  font-size: rem(18px);
}

h5 {
  font-size: rem(16px);
}

h6 {
  font-size: rem(14px);
}


.h1 { @extend h1; }
.h2 { @extend h2; }
.h3 { @extend h3; }
.h4 { @extend h4; }
.h5 { @extend h5; }
.h6 { @extend h6; }

p {
  margin: 0 0 ($gutter / 2) 0;

  img {
    margin: 0;
  }
}

em {
  font-style: italic;
}

b, strong {
  font-weight: bold;
}

small {
  font-size: 0.9rem;
}

sup, sub {
  position: relative;
  font-size: 60%;
  vertical-align: baseline;
}
sup {
  top: -0.5em;
}

sub {
  bottom: -0.5em;
}

//================ Blockquotes ================
blockquote {
  font-size: 1.125rem;
  line-height: 1.45;
  font-style: italic;
  margin: 0 0 $gutter;
  padding: ($gutter / 2) $gutter;
  border-left: 1px solid $colorBorder;

  p {
    margin-bottom: 0;

    & + cite {
      margin-top: $gutter / 2;
    }
  }

  cite {
    display: block;
    font-size: 0.75rem;

    &:before {
      content: '\2014 \0020';
    }
  }
}

//================ Code ================
code, pre {
  background-color: #faf7f5;
  font-family: Consolas,monospace;
  font-size: 1rem;
  border: 0 none;
  padding: 0 rem(2px);
  color: #51ab62;
}

pre {
  overflow: auto;
  padding: $gutter / 2;
  margin: 0 0 $gutter;
}

//================ Horizontal Rules ================
hr {
  clear: both;
  border-top: solid $colorBorder;
  border-width: 1px 0 0;
  margin: $gutter 0;
  height: 0;

  &.hr--small {
    margin: ($gutter / 2) 0;
  }

  &.hr--clear {
    border-top-color: transparent;
  }
}

//================ Section Headers ================
.section-header {
  margin-bottom: rem(10px);
  padding: 0 rem(10px);
  text-align: center;

  @include media-breakpoint-up(sm) {
    text-align: left;
    @include flexbox;
    @include flex-flow();

    h1 {
      @include flex(1);
    }

    .view-options {
      margin-left: auto;

    }
  }

  @include media-breakpoint-up(md) {
    padding: 0;
    margin-bottom: rem(20px);
  }

  @include media-breakpoint-up(lg) {
    margin-bottom: rem(40px);
  }

  h1 {
    text-transform: uppercase;
    margin: 0;
  }
}

.collection-view {
  display: inline-block;
  border: 1px solid $colorBorder;
  border-radius: $radius;
  padding: 0 rem(5px);
  height: rem(40px); // same as form elements
  overflow: hidden;

  //================ Only show on larger screens ================
  @include media-breakpoint-up (lg) {
    display: inline-block;
  }
}

.change-view {
  display: block;
  background: none;
  border: 0 none;
  float: left;
  padding: rem(10px) rem(8px);
  color: $colorBorder;
  line-height: 1;

  &:hover,
  &:focus {
    color: $colorPrimary;
  }
}

.change-view--active {
  cursor: default;
  color: $colorPrimary;
}

//============================================================================
//  #Rich Text Editor
//============================================================================
.rte {
  margin-bottom: $gutter / 2;

  a {
    text-decoration: underline;
  }

  // Add some top margin to headers from the rich text editor
  h1, h2, h3, h4, h5, h6 {
    margin-top: 2em;

    &:first-child {
      margin-top: 0;
    }

    a {
      text-decoration: none;
    }
  }

  > div {
    margin-bottom: $gutter / 2;
  }

  li {
    margin-bottom: 0.4rem;
  }
}

.rte--header {
  margin-bottom: 0;
}

//============================================================================
//  #Links and Buttons
//============================================================================
a,
.text-link {
  color: $colorLink;
  text-decoration: none;
  background: transparent;
}

a:hover,
a:focus {
  color: $colorLinkHover;
}

button {
  overflow: visible;
}

button[disabled],
html input[disabled] {
  cursor: default;
}

.button,
.rte .button {
  display: inline-block;
  padding: rem(9px) rem(10px);
  width: auto;
  margin: 0;
  font-weight: bold;
  text-decoration: none;
  text-align: center;
  vertical-align: middle;
  white-space: nowrap;
  cursor: pointer;
  border: 1px solid transparent;
  text-transform: uppercase;
  @include prefix('user-select', 'none');
  -webkit-appearance: none;
  -moz-appearance: none;
  border-radius: $radius;

  //================ Set primary button colors - can override later ================
  background-color: $colorBtnPrimary;
  color: $colorBtnPrimaryText;

  &:hover {
    background-color: $colorBtnPrimaryHover;
    color: $colorBtnPrimaryText;
  }

  &:active,
  &:focus {
   background-color: $colorBtnPrimaryActive;
   color: $colorBtnPrimaryText;
  }

  &[disabled],
  &.disabled {
    cursor: default;
    color: $disabledBorder;
    background-color: $disabledGrey;
  }
}

.button.secondary,
.rte .button.secondary {
  @extend .btn;
  background-color: $colorBtnSecondary;
  color: $colorBtnSecondaryText;

  &:hover {
    background-color: $colorBtnSecondaryHover;
    color: $colorBtnSecondaryText;
  }

  &:active,
  &:focus {
   background-color: $colorBtnSecondaryActive;
   color: $colorBtnSecondaryText;
  }
}

.button.small {
  padding: rem(4px) rem(5px);
  font-size: rem(12px);
}

.button.large {
  padding: rem(12px) rem(15px);
  font-size: em(16px);
}

.button.full {
  width: 100%;
}

//================ Force an input/button to look like a text link ================
.text-link {
  display: inline;
  border: 0 none;
  background: none;
  padding: 0;
  margin: 0;
}

//============================================================================
//  #Lists
//============================================================================
ul, ol {
  margin: 0 0 ($gutter / 2) ($gutter / 2) ;
  padding: 0;
}

ol { list-style: decimal; }
ul ul, ul ol,
ol ol, ol ul { margin: rem(4px) 0 rem(5px) rem(20px); }
li { margin-bottom: 0.25rem; }

ul.square { list-style: square outside; }
ul.disc { list-style: disc outside; }
ol.alpha { list-style: lower-alpha outside; }

.no-bullets {
  list-style: none outside;
  margin-left: 0;
}

.inline-list {
  margin-left: 0;

  li {
    display: inline-block;
    margin-bottom: 0;
  }
}

//============================================================================
//  #Tables
//============================================================================
table {
  width: 100%;
  border-collapse: collapse;
  border-spacing: 0;
}

table.full {
  width: 100%;
  margin-bottom: 1rem;
}

.table-wrap {
  max-width: 100%;
  overflow: auto;
  -webkit-overflow-scrolling: touch;
}

th {
  font-weight: bold;
}

th, td {
  text-align: left;
  padding: $gutter / 2;
  border: rem(1px) solid $colorBorder;
}


//============================================================================
//  #OOCSS Media Object
//    - http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/
//============================================================================
.media,
.media-flex {
  overflow: hidden;
  _overflow: visible;
  zoom: 1;
}

.media-img {
  float: left;
  margin-right: $gutter;
}

.media-img-right {
  float: right;
  margin-left: $gutter;
}

.media-img img,
.media-img-right img {
  display: block;
}


//============================================================================
//  #Images and Iframes
//============================================================================
img {
  border: 0 none;
  max-width: 100%;
}

svg:not(:root) {
  overflow: hidden;
}

img.auto {
  max-width: 100%;
}

.video-wrapper {
  position: relative;
  overflow: hidden;
  max-width: 100%;
  padding-bottom: 56.25%;
  height: 0;
  height: auto;

  iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

//============================================================================
//  #Forms
//============================================================================
form {
  margin-bottom: 0;
}

.form-vertical {
  margin-bottom: $gutter / 2;
}

//================ Prevent zoom on touch devices in active inputs ================
@include media-breakpoint-up(md) {
  input,
  textarea {
    font-size: rem(16px);
  }
}

input,
textarea,
button,
select {
  padding: 0;
  margin: 0;
  @include prefix('user-select', 'text');
}

button {
  background: none;
  border: none;
  cursor: pointer;
}

button,
input,
textarea {
  -webkit-appearance: none;
  -moz-appearance: none;
}

button {
  background: none;
  border: none;
  display: inline-block;
  cursor: pointer;
}

input[type="image"] {
  padding-left: 0;
  padding-right: 0;
}

fieldset {
  border: rem(1px) solid $colorBorder;
  padding: $gutter / 2;
}

legend {
  border: 0;
  padding: 0;
}

button,
input[type="submit"] {
  cursor: pointer;
}

input,
textarea,
select {
  border: rem(1px) solid $colorBorder;
  max-width: 100%;
  padding: rem(8px) rem(10px);
  border-radius: $radius;

  &:focus {
    border: rem(1px) solid darken($colorBorder, 10%);
  }

  &[disabled],
  &.disabled {
    cursor: default;
    background-color: $disabledGrey;
    border-color: $disabledBorder;
  }

  &.input-full {
    width: 100%;
  }
}

textarea {
  min-height: rem(100px);
}

//================ Input element overrides ================
input[type="checkbox"],
input[type="radio"] {
  display: inline;
  margin: 0 rem(8px) 0 0;
  padding: 0;
  width: auto;
}

input[type="checkbox"] {
  -webkit-appearance: checkbox;
  -moz-appearance: checkbox;
}

input[type="radio"] {
  -webkit-appearance: radio;
  -moz-appearance: radio;
}

input[type="image"] {
  padding-left: 0;
  padding-right: 0;
}

select {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  background-position: right center;
  background: {
    image: url('{{ "ico-select.svg" | asset_url }}');
    repeat: no-repeat;
    position: right 10px center;
    color: transparent;
  }
  padding-right: rem(28px);
  text-indent: rem(0.01px);
  text-overflow: '';
  cursor: pointer;

  //================ Hide the svg arrow in IE9 and below ================
  .ie9 &,
  .lt-ie9 & {
    padding-right: 10px;
    background-image: none;
  }
}

optgroup {
  font-weight: bold;
}

// Force option color (affects IE only)
option {
  color: #000;
  background-color: #fff;
}

select::-ms-expand {
  display: none;
}

//================ Form labels ================
.hidden-label {
  position: absolute;
  height: 0;
  width: 0;
  margin-bottom: 0;
  overflow: hidden;
  clip: (rem(1px), rem(1px), rem(1px), rem(1px));

  // No placeholders, so force show labels
  .ie9 &,
  .lt-ie9 & {
    height: auto;
    width: auto;
    margin-bottom: 2px;
    overflow: visible;
  }
}

label[for] {
  cursor: pointer;
}

//================ Horizontal Form ================
.form-vertical {
  input,
  select,
  textarea {
    display: block;
    margin-bottom: rem(10px);
  }

  input[type="radio"],
  input[type="checkbox"] {
    display: inline-block;
  }
}

//================ Error styles ================
input,
select,
textarea {
  &.error {
    border-color: $errorRed;
    background-color: $errorRedBg;
    color: $errorRed;
  }
}

label.error {
  color: $errorRed;
}


//================ Input Group ================
.input-group {
  @include flexbox;
  position: relative;

  .input-group-field:first-child,
  .input-group-btn:first-child,
  .input-group-btn:first-child > .btn,
  input[type="hidden"]:first-child + .input-group-field,
  input[type="hidden"]:first-child + .input-group-btn > .btn {
    border-radius: $radius 0 0 $radius;
  }

  .input-group-field:last-child,
  .input-group-btn:last-child > .btn {
   border-radius: 0 $radius $radius 0;
  }

  input {
    // Nasty Firefox hack for inputs http://davidwalsh.name/firefox-buttons
    &::-moz-focus-inner {
      border: 0;
      padding: 0;
      margin-top: rem(-1px);
      margin-bottom: rem(-1px);
    }
  }
}

.input-group-field,
.input-group-btn {
  @include flex(1);
  margin: 0;
}

.input-group .btn,
.input-group .input-group-field {
  height: rem(40px);
}

.input-group .input-group-field {
  width: 100%;
}

.input-group-btn {
  position: relative;
  white-space: nowrap;
}

//============================================================================
//  #Pagination
//============================================================================
.pagination {
  margin-bottom: 1rem;
}

//================ Custom Pagination ================
.pagination-custom {
  display: inline-block;
  padding-left: 0;
  margin: 0 0 $gutter;
  border-radius: $radius;
}

.pagination-custom > li {
  display: inline;
}

.pagination-custom > li > a,
.pagination-custom > li > span {
  position: relative;
  float: left;
  padding: rem(5px) rem(10px);
  margin-left: rem(-1px);
  line-height: 1.42;
  text-decoration: none;
  border: rem(1px) solid $colorBorder;
}

.pagination-custom > li:first-child > a,
.pagination-custom > li:first-child > span {
  margin-left: 0;
  border-bottom-left-radius: rem(4px);
  border-top-left-radius: rem(4px);
}

.pagination-custom > li:last-child > a,
.pagination-custom > li:last-child > span {
  border-top-right-radius: rem(4px);
  border-bottom-right-radius: rem(4px);
}

.pagination-custom > li > a:hover,
.pagination-custom > li > span:hover,
.pagination-custom > li > a:focus,
.pagination-custom > li > span:focus {
  // hover color
}

.pagination-custom > .active > a,
.pagination-custom > .active > span,
.pagination-custom > .active > a:hover,
.pagination-custom > .active > span:hover,
.pagination-custom > .active > a:focus,
.pagination-custom > .active > span:focus {
  cursor: default;
  color: $colorTextBody;
}

.pagination-custom > .disabled > span,
.pagination-custom > .disabled > a,
.pagination-custom > .disabled > a:hover,
.pagination-custom > .disabled > a:focus {
  color: #999999;
  cursor: not-allowed;
}

.pagination-custom-lg > li > a,
.pagination-custom-lg > li > span {
  padding: rem(10px) rem(16px);
  font-size: rem(18px);
}

.pagination-custom-lg > li:first-child > a,
.pagination-custom-lg > li:first-child > span {
  border-bottom-left-radius: rem(6px);
  border-top-left-radius: rem(6px);
}

.pagination-custom-lg > li:last-child > a,
.pagination-custom-lg > li:last-child > span {
  border-top-right-radius: rem(6px);
  border-bottom-right-radius: rem(6px);
}

.pagination-custom-sm > li > a,
.pagination-custom-sm > li > span {
  padding: rem(5px) rem(10px);
  font-size: rem(12px);
}

.pagination-custom-sm > li:first-child > a,
.pagination-custom-sm > li:first-child > span {
  border-bottom-left-radius: rem(3px);
  border-top-left-radius: rem(3px);
}

.pagination-custom-sm > li:last-child > a,
.pagination-custom-sm > li:last-child > span {
  border-top-right-radius: rem(3px);
  border-bottom-right-radius: rem(3px);
}


//============================================================================
//  #Site Header
//============================================================================
.site-header {
  @include vfixelement(top);
  z-index: 100; //Above everything
  @include flexbox;
  @include flex-flow();
  background: #fff;

  @include media-breakpoint-up(md) {
    padding: ($gutter / 4) 0;
  }
  @include media-breakpoint-up(lg){
    padding: ($gutter / 4) $gutter;
  }

  &.transparent {
    background: transparent;
  }
}

.site-branding {
  @include flex(0 0 rem(69px));

  @include media-breakpoint-up(md) {
    @include flex(0 0 rem(103px));
  }

  a,
  a:hover,
  a:focus {
    text-decoration: none;
  }

  a, img {
    display: block;
  }

  a {
    padding: rem(10px) 0;
    @include media-breakpoint-up(md) {
      padding: rem(5px) 0;
    }
  }

  img {
    margin: 0 auto;
    height: rem(20px);
    @include media-breakpoint-up(md) {
      height: rem(30px);
    }
  }
  h1 {
    margin: 0;
    line-height: 1;
  }
}

//================ Header Toggles ================
.menu-toggle {
  @include media-breakpoint-up(lg) {
    display: none;
  }

  .toggle {
    @include iconBtn('{{ "icon-menu.png" | asset_url }}');
  }
}

.cart-toggle {
  display: block;
  margin-left: auto; // Align cart button right
  @include media-breakpoint-up(md) {
    margin-left: 0;  // Align right margin goes to search
  }
  @include media-breakpoint-up(xl) {
    margin-left: $gutter;
  }

  .toggle {
    @include iconBtn('{{ "icon-bag.png" | asset_url }}');
    .text {
      display: none;
      text-transform: uppercase;
      font-weight: bold;
      padding: rem(10px) 0;
      margin-right: rem(10px);
    }
    @include media-breakpoint-up(sm) {
      display: flex;
      .text {
        display: block;
      }
    }

    @include media-breakpoint-up(lg) {
      .icon {
        background-position: 0 rem(5px);
      }
      .text {
        padding: rem(18px) 0 rem(2px);
      }
    }
  }
}

//================ Header Search ================
.header-search {
  max-width: rem(220px);
  margin-left: auto;
  width: 100%;
  display: none;

  @include media-breakpoint-up(md) {
    display: block;
  }
  @include media-breakpoint-up(lg) {
    margin-top: rem(5px);
    margin-bottom: rem(-5px);
  }
}

.search-bar{
  @include flexbox;
  @include flex-flow();
  position: relative;

  .search {
    width: 100%;
    padding: rem(10px) rem(10px) rem(9px) rem(50px);
    background: transparent;
    border: none;
    border-bottom: rem(1px) solid $colorBorder;
    &:active,
    &:focus {
      background: #fff;
    }
  }
  .label {
    display: block;
    position: absolute;
    left: 0;
    @include iconBtn('{{ "icon-search.png" | asset_url }}');

  }
}

//============================================================================
//  #Site Nav and Dropdowns
//============================================================================
.nav-bar {
  display: none;

  @include media-breakpoint-up(lg) {
    display: block;
  }
}

.site-nav {
  font-size: 1rem;
  cursor: default;
  margin: 0 0 0 rem(10px);
  padding: rem(18px) 0 rem(2px);

  li {
    margin: 0;
    display: block;
  }

  a {
    display: block;
    text-decoration: none;
    white-space: nowrap;
    color: $colorNavText;

    &:hover,
    &:active,
    &:focus {
      text-decoration: underline;
    }

    .icon-arrow-down {
      position: relative;
      top: rem(-2px);
      font-size: rem(10px);
      padding-left: $gutter / 4;
    }
  }

  > li {
    position: relative;
    display: inline-block;
    margin-left: rem(30px);

    > a {
      text-transform: uppercase;
      font-weight: bold;
    }
  }
}

//================ Dropdowns ================
.dropdown {
  display: none;
  position: absolute;
  left: 0;
  margin: 0;
  z-index: $zindexNavDropdowns;
  min-width: 100%;

  .supports-no-touch .has-dropdown:hover &,
  .has-dropdown.nav-hover &,
  .nav-focus + & {
    display: block;
  }

  a {
    background-color: $colorNav;
    padding: rem(5px);

    &:hover,
    &:active,
    &:focus {
      background-color: darken($colorNav, 10%);
    }
  }
}

//============================================================================
//  #Mobile Nav
//  - List of items inside the mobile drawer
//============================================================================
.mobile-nav {
  // Negative of .drawer left/right padding for full-width link tap area
  margin: (-$gutter / 2) (-$gutter / 2) 0 (-$gutter / 2);

  li {
    margin-bottom: 0;
  }
}

.mobile-nav__search {
  padding: $gutter / 2;

  .search-bar {
    margin-bottom: 0;
  }
}

.mobile-nav__item {
  position: relative;
  display: block;

  // Background color on top level items so there is no
  // element overlap on subnav's CSS toggle animation
  .mobile-nav > & {
    background-color: $colorDrawers;
  }

  &:after {
    content: '';
    position: absolute;
    bottom: 0;
    left: $gutter / 2;
    right: $gutter / 2;
    border-bottom: rem(1px) solid $colorDrawerBorder;
  }

  .mobile-nav > &:last-child:after {
    display: none;
  }
}

// Login/logout links can't have a class on them, so style <a> element
.mobile-nav__item a {
  display: block;
}

.mobile-nav__item a,
.mobile-nav__toggle button {
  color: $colorDrawerText;
  padding: $gutter / 2;
  text-decoration: none;

  &:hover,
  &:active,
  &:focus {
    color: darken($colorDrawerText, 15%);
  }

  &:active,
  &:focus {
    background-color: darken($colorDrawers, 5%);
  }
}

.mobile-nav__item--active {
  font-weight: bold;
}

.mobile-nav__has-sublist {
  display: table;
  width: 100%;

  .mobile-nav__link {
    display: table-cell;
    vertical-align: middle;
    width: 100%;
  }
}

.mobile-nav__toggle {
  display: table-cell;
  vertical-align: middle;
  width: 1%;
}

.mobile-nav__toggle-open {
  .mobile-nav--expanded & {
    display: none;
  }
}

.mobile-nav__toggle-close {
  display: none;

  .mobile-nav--expanded & {
    display: block;
  }
}

.mobile-nav__sublist {
  margin: 0;
  max-height: 0;
  visibility: hidden;
  overflow: hidden;
  @include backface(hidden);
  @include transition(all 300ms cubic-bezier(0.57, 0.06, 0.05, 0.95));

  .mobile-nav--expanded + & {
    visibility: visible;
    max-height: rem(700px);
    @include transition(all 700ms cubic-bezier(0.57, 0.06, 0.05, 0.95));
  }

  .mobile-nav__item:after {
    top: 0;
    bottom: auto;
  }

  .mobile-nav__link {
    padding-left: $gutter;
    font-weight: normal;
  }
}

//============================================================================
//  #Drawers
//============================================================================
.js-drawer-open {
  overflow: hidden;
}

.drawer {
  display: none;
  position: fixed;
  overflow-y: auto;
  overflow-x: hidden;
  -webkit-overflow-scrolling: touch;
  top: 0;
  bottom: 0;
  padding: 0 ($gutter / 2) ($gutter / 2);
  max-width: 95%;
  z-index: $zindexDrawer;
  color: $colorDrawerText;
  background-color: $colorDrawers;
  @include transition($drawerTransition);

  a {
    color: $colorDrawerText;

    &:hover,
    &:focus {
      opacity: 0.7;
    }
  }

  input,
  textarea {
    border-color: $colorDrawerBorder;
  }
}

.drawer--left {
  width: $drawerNavWidth;
  left: -$drawerNavWidth;
  border-right: rem(1px) solid $colorDrawerBorder;

  .js-drawer-open-left & {
    display: block;
    @include transform(translateX($drawerNavWidth));

    .lt-ie9 & {
      left: 0;
    }
  }
}

.drawer--right {
  width: $drawerCartWidth;
  right: -$drawerCartWidth;
  border-left: rem(1px) solid $colorDrawerBorder;

  .js-drawer-open-right & {
    display: block;
    @include transform(translateX(-$drawerCartWidth));

    .lt-ie9 & {
      right: 0;
    }
  }
}

#PageContainer {
  overflow: hidden;
}

.is-moved-by-drawer {
  .js-drawer-open-left & {
    @include transform(translateX($drawerNavWidth));
    @include transition($drawerTransition);
  }

  .js-drawer-open-right & {
    @include transform(translateX(-$drawerCartWidth));
    @include transition($drawerTransition);
  }
}

.is-moved-by-drawer.is-transitioning {
  @include transition($drawerTransition);
}

.drawer__header {
  display: table;
  height: rem(70px);
  width: 100%;
  margin-bottom: $gutter / 2;
  border-bottom: rem(1px) solid $colorDrawerBorder;
}

.drawer__title,
.drawer__close {
  display: table-cell;
  vertical-align: middle;
}

.drawer__title {
  width: 100%;
}

.drawer__close {
  width: 1%;
  text-align: center;
  font-size: rem(18px);
}

.drawer__close button {
  position: relative;
  right: rem(-20px);
  height: 100%;
  padding: 0 rem(20px);
  color: inherit;

  &:active,
  &:focus {
    background-color: darken($colorDrawers, 5%);
  }
}

//============================================================================
//  #Main Content
//============================================================================

.main-content {
  @include make-container();
  background-color: $colorBody;
  padding: rem(40px) 0; // 40px header

  .template-index & {
    padding-top: 0;
  }

  @include media-breakpoint-up(md) {
    padding-top: rem(70px); // 60px header + 10px spacing
  }
  @include media-breakpoint-up(lg) {
    min-height: 100%;
    margin-bottom: $footerHeight;
    padding-top: rem(90px); // 60px header + 10px spacing
  }
  // Put in front of footer and behind header
  position: relative;
  z-index: 5;
}

//============================================================================
//  #Site Footer
//============================================================================
.site-footer {
  background-color: $colorFooterBg;
  padding: $gutter 0;
  color: $colorFooterText;

  @include media-breakpoint-up (lg) {
    padding: rem(60px) 0;
    @include vfixelement(bottom);
    z-index: 1; //Behind main content
  }
}
.newsletter,
.footer-navigation,
.copyright {
  text-align: center;
}

.newsletter,
.footer-navigation {
  @include make-container;
  @include make-container-max-widths((xs: rem(640px), lg: rem(660px)));
  padding: 0 rem(10px);
  margin-bottom: rem(60px);
  @include media-breakpoint-up(md) {
    padding: 0 rem(20px);
  }
}

.newsletter {
  .newsletter-form {
    @include flexbox;
    margin-top: rem(30px);
  }

  .email-input {
    min-width: 0;
    @include flex(1);
    background: #fce29a;
    border: none;
  }

  .button {
    color: #ddd;
    background: #222;

  }
}

.footer-navigation {
  @include flexbox;
  @include flex-flow(row wrap);
}

.collection-links,
.secondary-links {
  @include flex(1 100%);

  @include media-breakpoint-up(sm) {
    @include flex(1 50%);
  }

  @include media-breakpoint-up(md) {
    @include flex(1);
    text-align: left;
  }

  ul {
    list-style: none;
    margin: 0 0 rem(20px);

    @include media-breakpoint-up(sm) {
      margin: 0;
    }
    ul {
      margin: rem(20px) 0 0;
    }
  }
  > ul > li {
    margin-bottom: rem(20px);
    &:last-child {
      margin-bottom: 0;
    }
    > a {
      text-transform: uppercase;
      font-weight: bold;
    }
  }
}

.social-links {
  margin-top: rem(20px);
  @include flex(1 100%);

  @include media-breakpoint-up(md) {
    @include flex(1);
    margin-top: 0;
  }

  ul {
    list-style: none;
    margin: 0;
    li {
      display: inline-block;
      margin-right: rem(10px);
      &:last-child {
        margin-right: 0;
      }
    };
    .facebook {
      @include iconBtn('{{ "icon-facebook.png" | asset_url }}')
    }
    .instagram {
      @include iconBtn('{{ "icon-instagram.png" | asset_url }}')
    }
    .pinterest {
      @include iconBtn('{{ "icon-pinterest.png" | asset_url }}')
    }
  }
}

.tagline {
  display: block;
  .image {
    height: rem(20px);
    display: block;
    background:{
      image: url('{{ "tagline.png" | asset_url }}');
      repeat: no-repeat;
      position: 50% 50%;
      color: transparent;
    }
  }
  .fallback-text {
    @include makeInvisible;
  }
}

//============================================================================
//  #Product and Collection Grids
//============================================================================
.grid__image {
  display: block;
  margin: 0 auto ($gutter / 2);

  img {
    display: block;
    margin: 0 auto;
  }
}

.collection-container {
  @include make-container;
  @include make-container-max-widths();
  @include make-row();
}

.collection-main {
  @include make-col();
  @include make-col-span(12)
}

// @todo add sidebar

.product-grid {
  @include make-subrow();
}

.product-card {
  @include make-col();
  @include make-col-span(6);

  @include flexbox;
  @include flex-flow(row wrap);

  margin-bottom: ($gutter / 2);

  @include media-breakpoint-up(sm) {
    @include make-col-span(4);
  }

  @include media-breakpoint-up(md) {
    @include make-col-span(3);
  }

  .card-image {
    @include flex(0 0 100%);
    img{
      display: block;
      margin: auto;
    }
  }
  .card-text {
    @include flex(0 0 100%);
    @include align-self(flex-end);
    text-align: center;
    padding: rem(10px);

    .product-title {
      margin: 0 0 rem(12px);
      font-size: rem(16px);
      @include media-breakpoint-up(lg) {
        font-size: rem(20px);
        margin: rem(12px) 0;
      }
    }
    .price {
      font-weight: bold;
      margin: rem(12px) 0;
      font-size: rem(18px);
    }
  }
}

//============================================================================
//  #Collection Filters
//============================================================================
.filter--active {
  font-weight: bold;
}

//=============================================================================
// #Breadcrumbs
//=============================================================================
//breadcrumb {
// margin-bottom: $gutter;

// a,
// span {
//   display: inline-block;
//   padding: 0 rem(7px) 0 0;
//   margin-right: rem(7px);

//   &:first-child {
//     padding-left: 0;
//   }
// }
//
//

//============================================================================
//  #Product Page
//============================================================================
.product-single__variants {
  display: none;

  .no-js & {
    display: block;
  }
}

.product-single__photos {
  margin-bottom: $gutter;
}

.product-single__photos,
.product-single__thumbnails {
  a, img {
    display: block;
    margin: 0 auto;
  }

  li {
    margin-bottom: $gutter;
  }
}

.container {
  @include make-container;
  @include make-container-max-widths();
  @include make-row();
}

.image-gallery {
  @include make-col();
  @include flex(1 100%);
  @include make-subrow();
  @include media-breakpoint-up(md) {
    @include make-col-span(6);
  }
  @include media-breakpoint-up(xl) {
    @include make-col-span(7);
  }

  .main-image {
    @include make-col();
    img {
      display: block;
    }

    @include media-breakpoint-up(xl) {
      @include make-col-span(6,7);
      @include order(2)
    }

  }
  .thumbnails {
    margin: 0;
    @include make-col();
    list-style: none;

    @include media-breakpoint-up(xl) {
      @include make-col-span(1,7);
      @include order(1)
    }
  }
}

.product-details {
  @include make-col();
  @include flex(1 100%);
  @include media-breakpoint-up(md) {
    @include make-col-span(6);
  }
  @include media-breakpoint-up(xl) {
    @include make-col-span(5);
  }
}


//============================================================================
//  #Notes and Form Feedback
//============================================================================
.note,
.errors {
  border-radius: $radius;
  padding: rem(6px) rem(12px);
  margin-bottom: $gutter / 2;
  border: rem(1px) solid transparent;
  font-size: 0.9rem;
  text-align: left;

  ul,
  ol {
    margin-top: 0;
    margin-bottom: 0;
  }

  li:last-child {
    margin-bottom: 0;
  }

  p {
    margin-bottom: 0;
  }
}

.note {
  border-color: $colorBorder;
}

.errors {
  ul {
    list-style: disc outside;
    margin-left: rem(20px);
  }
}

.form-success {
  color: $successGreen;
  background-color: $successGreenBg;
  border-color: $successGreen;

  a {
    color: $successGreen;
    text-decoration: underline;

    &:hover {
      text-decoration: none;
    }
  }
}

.form-error,
.errors {
  color: $errorRed;
  background-color: $errorRedBg;
  border-color: $errorRed;

  a {
    color: $errorRed;
    text-decoration: underline;

    &:hover {
      text-decoration: none;
    }
  }
}


//============================================================================
//  #Cart Page
//============================================================================
.cart__row {
  position: relative;
  margin-top: $gutter;
  padding-top: $gutter;
  border-top: rem(1px) solid $colorBorder;

  &:first-child {
    margin-top: 0;
  }

  &:first-child {
    padding-top: 0;
    border-top: 0 none;
  }

  .js-qty {
    margin: 0 auto;
  }
}

@include media-breakpoint-up (lg) {
  .cart__row--table-large {
    display: table;
    table-layout: fixed;
    width: 100%;

    .grid__item {
      display: table-cell;
      vertical-align: middle;
      float: none;
    }
  }
}

.cart__image {
  display: block;

  img {
    display: block;
  }
}

.cart__subtotal {
  margin: 0 0 0 ($gutter / 3);
  display: inline;
}

.cart__mini-labels {
  display: block;
  margin: ($gutter / 3) 0;
  font-size: rem(12px);

  @include media-breakpoint-up (lg) {
    display: none;
  }
}

.cart__remove {
  display: block;
}

.cart__note-add.is-hidden {
  display: none;
}

.cart__note {
  display: none;

  &.is-active {
    display: block;
  }
}

//============================================================================
//  #Ajax Cart Styles (conditionally loaded)
//============================================================================
{% if settings.ajax_cart_enable %}

.ajaxcart__inner {
  margin-bottom: $gutter;
}

.ajaxcart__row {
  > .grid {
    margin-left: -$gutter / 2;

    > .grid__item {
      padding-left: $gutter / 2;
    }
  }
}

.ajaxcart__product {
  position: relative;
  max-height: rem(500px);

  &.is-removed {
    max-height: 0;
    overflow: hidden;
    visibility: hidden;
    @include backface(hidden);
    @include transition(all 450ms cubic-bezier(0.57,.06,.05,.95));
  }
}

.ajaxcart__row {
  padding-bottom: $gutter / 2;
  margin-bottom: $gutter / 2;
  border-bottom: rem(1px) solid $colorDrawerBorder;
}

.ajaxcart__product-image {
  display: block;
  overflow: hidden;
  margin-bottom: rem(15px);

  img {
    display: block;
    margin: 0 auto;
    max-width: 100%;
  }
}

.ajaxcart__product-name,
.ajaxcart__product-meta {
  display: block;
}

.ajaxcart__product-name + .ajaxcart__product-meta {
  padding-top: $gutter / 5;
}

//================ Quantity Selectors ================
.js-qty {
  position: relative;
  margin-bottom: 1rem;
  max-width: rem(100px);
  min-width: rem(75px);
  overflow: visible;

  input {
    display: block;
    background: none;
    text-align: center;
    width: 100%;
    padding: rem(5px) rem(25px);
    margin: 0;
  }
}

.js-qty__adjust {
  cursor: pointer;
  position: absolute;
  display: block;
  top: 0;
  bottom: 0;
  border: 0 none;
  padding: 0 rem(8px);
  background: none;
  text-align: center;
  overflow: hidden;
  @include prefix('user-select', 'none');

  &:hover,
  &:focus {
    color: $colorPrimary;
  }
}

.js-qty__adjust--plus {
  right: 0;
  border-left: rem(1px) solid $colorBorder;
}

.js-qty__adjust--minus {
  left: 0;
  border-right: rem(1px) solid $colorBorder;
}

//================ Quantity Selectors in Ajax Cart ================
.ajaxcart__qty {
  @extend .js-qty;
  margin: 0;

  .is-loading & {
    opacity: 0.5;
    @include transition(none);
  }
}

.ajaxcart__qty-num {
  border-color: $colorDrawerBorder;
  color: $colorDrawerText;
}

.ajaxcart__qty-adjust {
  @extend .js-qty__adjust;
  color: $colorDrawerText;
}

.ajaxcart__qty--plus {
  @extend .js-qty__adjust--plus;
  border-color: $colorDrawerBorder;
}

.ajaxcart__qty--minus {
  @extend .js-qty__adjust--minus;
  border-color: $colorDrawerBorder;
}

{% endif %} // settings.ajax_cart_enable
